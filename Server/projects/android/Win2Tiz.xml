<?xml version="1.0" encoding="utf-8"?>

<Makefile>

<Solution Path="../win32_vs2013/KataProfiler_Server.sln" />
    
    <CommonGccConfig>
        
        <GccConfig Name="armeabi-v7a">
    
            <Macro Name="MAIN_PROJECT" 			Value="" />
            <Macro Name="GENERATE_DSYM"			Value="False" />
            <Macro Name="STRIP_DEBUG_SYMBOLS_FOR_RELEASE"	Value="True" />
            <Macro Name="STRIP_DEBUG_SYMBOLS_FOR_DEBUG"	    Value="False" />
				
            <Macro Name="ANDROID_NDK_PATH" 		Value="$(ANDROID_NDK_HOME)" />
            <!--ANDROID_PLATFORM: user defined macro. -->
            <Macro Name="ANDROID_PLATFORM" 		Value="android-$(NATIVE_API_LEVEL)" />
            <!--TOOLCHAIN_FOLDERNAME: user defined macro. -->
            <Macro Name="TOOLCHAIN_VERSION"		Value="4.4.3" />
            <!-- <Macro Name="TOOLCHAIN_VERSION"		Value="4.7" /> -->
            <Macro Name="TOOLCHAIN_FOLDERNAME"	Value="arm-linux-androideabi-$(TOOLCHAIN_VERSION)" />
            
            
            <!--TOOLCHAIN: required macro. This it is used to specify the path to the compile/link tools-->
            <Macro Name="TOOLCHAIN" 			Value="$(ANDROID_NDK_PATH)\toolchains\$(TOOLCHAIN_FOLDERNAME)\prebuilt\windows\bin\" />
            
            
            <!--CPP: 	the compiler for cpp files
                CC: 	the compiler for c files
                LD: 	the linker for dynamic libraryes, aka *.so files
                LS: 	the linker for static libraryes, aka *.a files	
                This macros are required!
                -->
			<Macro Name="TOOLCHAIN_PREFIX"		Value="arm-linux-androideabi" />
            <Macro Name="CPP" 			Value="$(TOOLCHAIN)\$(TOOLCHAIN_PREFIX)-g++.exe" />
            <Macro Name="CC" 			Value="$(TOOLCHAIN)\$(TOOLCHAIN_PREFIX)-gcc.exe" />
            <Macro Name="LD" 			Value="$(TOOLCHAIN)\$(TOOLCHAIN_PREFIX)-g++.exe" />
            <Macro Name="LS" 			Value="$(TOOLCHAIN)\$(TOOLCHAIN_PREFIX)-ar.exe" />
            <Macro Name="OBJCOPY"		Value="$(TOOLCHAIN)\$(TOOLCHAIN_PREFIX)-objcopy.exe" />
            <Macro Name="STRIP"		    Value="$(TOOLCHAIN)\$(TOOLCHAIN_PREFIX)-strip.exe" />
            
            
            
            <!--COMPILE_CPP_COMMAND_LINE: this is the command line to compile the cpp files -->
            <!--COMPILE_CC_COMMAND_LINE: this is the command line to compile the c files -->
            <!--DYNAMIC_LINK_COMMAND_LINE: this is the command line that creates *.so files (dynamic libraryes)-->
            <!--DYNAMIC_LINK_COMMAND_LINE: this is the command line that creates *.a files	(static libraryes)-->
            <!--This Macro needs a little bit more explanation. You can see that this Macros use $(DEFINES), $(CFLAGS).
                For instance if we have to compile a file from project Android, the final value of $(DEFINES) will be 
                $(DEFINES) from <Project Name="Android">     +       $(DEFINES) from <CommonGccConfig> .
                The same algorithm it is used also for $(INCLUDE_PATHS), $(CFLAGS) etc...-->
            <Macro Name="COMPILE_CPP_COMMAND_LINE" 	Value="$(CPP) $(DEFINES) $(CFLAGS) $(INCLUDE_PATHS) -c $(SRC_FILE) -o $(OBJ_FILE)" />
            <Macro Name="COMPILE_CC_COMMAND_LINE" 	Value="$(CC) $(DEFINES) $(CFLAGS) $(INCLUDE_PATHS) -c $(SRC_FILE) -o $(OBJ_FILE)" />
            <Macro Name="DYNAMIC_LINK_COMMAND_LINE" Value="$(LD) -Wl,-soname,$(OUT) -shared $(OBJ_FILES) $(LDLIBS)  $(LDFLAGS) $(LINK_PATHS) -o $(OUT)" />
            <Macro Name="STATIC_LINK_COMMAND_LINE" 	Value="$(LS) -r -s $(OUT) $(OBJ_FILES)" />
            <Macro Name="EXE_LINK_COMMAND_LINE" 	Value="$(LD) $(OBJ_FILES) $(LDLIBS)  $(LDFLAGS) $(LINK_PATHS) -o $(OUT)" />
            <Macro Name="DSYM_COMMAND_LINE" 	    Value="$(OBJCOPY) --only-keep-debug $(INPUT) $(OUT)" />
            <Macro Name="STRIP_COMMAND_LINE" 	    Value="$(STRIP) --strip-debug --strip-unneeded $(INPUT)" />

            
            <!--TYPES_OF_FILES_TO_BE_COMPILED: this macro specify what files to compile. Add here the extension and ';' as a separator-->
            <Macro Name="TYPES_OF_FILES_TO_BE_COMPILED"	Value="cpp;cc;c" />
            
            
            <!--DEFINES: this is mandatory and it is very important. You can see here CommonValue, DebugValue and ReleaseValue. 
                        The DEFINES for <CommonGccConfig> will be calculated like this:
                            for release:  	DEFINES = CommonValue + ReleaseValue 
                            for debug:		DEFINES = CommonValue + DebugValue 
                        Separators: ';' space or new line -->
            <Macro Name="DEFINES" 	CommonValue="OS_ANDROID"
                                    DebugValue="_DEBUG"
                                    ReleaseValue=""	/>
                <!-- Note: _GLIBCXX_USE_C99_MATH=1 is needed to have std:isnan, which is used by the smath part of Jet engine -->
                                    
                                    
            <!--CFLAGS: Represents the Gcc standard compiler flags that you want to use. 
                        This is mandatory and it is very important. You can see here CommonValue, DebugValue and ReleaseValue. 
                        The CFLAGS for <CommonGccConfig> will be calculated like this:
                            for release:  	CFLAGS = CommonValue + ReleaseValue 
                            for debug:		CFLAGS = CommonValue + DebugValue 
                        Separators: ';' space or new line -->
            <!-- -ffunction-sections -->
            <Macro Name="CFLAGS" 	CommonValue="	-mandroid 
              -ffunction-sections 
              -funwind-tables 
              -fstack-protector 
              -fpic 
              -Wno-psabi 
              -march=armv7-a 
              -mfpu=vfpv3-d16 
              -mfloat-abi=softfp 
              -Wno-write-strings 
              -fsigned-char 
              -fno-exceptions 
              -fno-rtti 
              -fomit-frame-pointer 
              -fno-strict-aliasing 
              -finline-limit=300 
              -ffast-math 
              -pipe  
													"
                                    DebugValue="-g"
                                    ReleaseValue="-w -fomit-frame-pointer -Os -O2"	/>
                                    
            <!--INCLUDE_PATHS: 	Specify the paths where the headers are searched 
                                Do not use paths with space in it.
                                Separators: ';' space or new line -->							
            <Macro Name="INCLUDE_PATHS" CommonValue="
                                                     $(ANDROID_NDK_PATH)\platforms\$(ANDROID_PLATFORM)\arch-arm\usr\include
                                                     " 
                                        DebugValue=""
                                        ReleaseValue=""	/>
            
            
            <!--LDLIBS: Here you can specify the static libraryes that you need use at linking step. You have to use the Gcc naming convention.
                        For example: -lstdc++  means that you want to use libstdc++.a library file
                        Separators: ';' space or new line -->							
            <Macro Name="LDLIBS" Value="" />
            
            
            <!--LDFLAGS: Gcc standard linker flags used to create *.so files
                         The LDFLAGS for <CommonGccConfig> will be calculated like this:
                            for release:  	LDFLAGS = CommonValue + ReleaseValue 
                            for debug:		LDFLAGS = CommonValue + DebugValue 
                         Separators: ';' space or new line -->	
            <Macro Name="LDFLAGS" 	CommonValue="" 
                                    DebugValue=""
                                    ReleaseValue=""	/>
                            
                            
            <!--LINK_PATHS: 	Specify the paths where the to search the libraries specified in LDLIBS
                                Do not use paths with space in it.
                                Separators: ';' space or new line -->			

            <Macro Name="LINK_PATHS" Value="" />
        </GccConfig>
		
		<GccConfig Name="x86">
    
            <Macro Name="MAIN_PROJECT" 			Value="" />
            <Macro Name="GENERATE_DSYM"			Value="False" />
            <Macro Name="STRIP_DEBUG_SYMBOLS_FOR_RELEASE"	Value="True" />
            <Macro Name="STRIP_DEBUG_SYMBOLS_FOR_DEBUG"	    Value="False" />
            
            
            <!--ANDROID_NDK_PATH: user defined macro. The value for this macro it is taken from Environment Variables. If ANDROID_NDK_HOME it is not declared the value for 
                ANDROID_NDK_PATH will be blank/empty/nothing/nada :) -->
            <Macro Name="ANDROID_NDK_PATH" 		Value="$(ANDROID_NDK_HOME)" />
            <!--ANDROID_PLATFORM: user defined macro. -->
            <Macro Name="ANDROID_PLATFORM" 		Value="android-$(NATIVE_API_LEVEL)" />
            <!--TOOLCHAIN_FOLDERNAME: user defined macro. -->
            <Macro Name="TOOLCHAIN_VERSION"		Value="4.4.3" />
            <!-- <Macro Name="TOOLCHAIN_VERSION"		Value="4.7" /> -->
            <Macro Name="TOOLCHAIN_FOLDERNAME"	Value="x86-$(TOOLCHAIN_VERSION)" />
            
            
            <!--TOOLCHAIN: required macro. This it is used to specify the path to the compile/link tools-->
            <Macro Name="TOOLCHAIN" 			Value="$(ANDROID_NDK_PATH)\toolchains\$(TOOLCHAIN_FOLDERNAME)\prebuilt\windows\bin\" />
            <!-- <Macro Name="TOOLCHAIN_BACKUP"		Value="$(ANDROID_NDK_PATH)\toolchains\$(TOOLCHAIN_FOLDERNAME)\prebuilt\windows\arm-linux-androideabi\bin\" /> -->
            
            
            <!--CPP: 	the compiler for cpp files
                CC: 	the compiler for c files
                LD: 	the linker for dynamic libraryes, aka *.so files
                LS: 	the linker for static libraryes, aka *.a files	
                This macros are required!
                -->
			<Macro Name="TOOLCHAIN_PREFIX"		Value="i686-linux-android" />
            <Macro Name="CPP" 			Value="$(TOOLCHAIN)\$(TOOLCHAIN_PREFIX)-g++.exe" />
            <Macro Name="CC" 			Value="$(TOOLCHAIN)\$(TOOLCHAIN_PREFIX)-gcc.exe" />
            <Macro Name="LD" 			Value="$(TOOLCHAIN)\$(TOOLCHAIN_PREFIX)-g++.exe" />
            <Macro Name="LS" 			Value="$(TOOLCHAIN)\$(TOOLCHAIN_PREFIX)-ar.exe" />
            <Macro Name="OBJCOPY"		Value="$(TOOLCHAIN)\$(TOOLCHAIN_PREFIX)-objcopy.exe" />
            <Macro Name="STRIP"		    Value="$(TOOLCHAIN)\$(TOOLCHAIN_PREFIX)-strip.exe" />
            
            
            
            <!--COMPILE_CPP_COMMAND_LINE: this is the command line to compile the cpp files -->
            <!--COMPILE_CC_COMMAND_LINE: this is the command line to compile the c files -->
            <!--DYNAMIC_LINK_COMMAND_LINE: this is the command line that creates *.so files (dynamic libraryes)-->
            <!--DYNAMIC_LINK_COMMAND_LINE: this is the command line that creates *.a files	(static libraryes)-->
            <!--This Macro needs a little bit more explanation. You can see that this Macros use $(DEFINES), $(CFLAGS).
                For instance if we have to compile a file from project Android, the final value of $(DEFINES) will be 
                $(DEFINES) from <Project Name="Android">     +       $(DEFINES) from <CommonGccConfig> .
                The same algorithm it is used also for $(INCLUDE_PATHS), $(CFLAGS) etc...-->
            <Macro Name="COMPILE_CPP_COMMAND_LINE" 	Value="$(CPP) $(DEFINES) $(CFLAGS) $(INCLUDE_PATHS) -c $(SRC_FILE) -o $(OBJ_FILE)" />
            <Macro Name="COMPILE_CC_COMMAND_LINE" 	Value="$(CC) $(DEFINES) $(CFLAGS) $(INCLUDE_PATHS) -c $(SRC_FILE) -o $(OBJ_FILE)" />
            <Macro Name="DYNAMIC_LINK_COMMAND_LINE" Value="$(LD) -Wl,-soname,$(OUT) -shared $(OBJ_FILES) $(LDLIBS)  $(LDFLAGS) $(LINK_PATHS) -o $(OUT)" />
            <Macro Name="STATIC_LINK_COMMAND_LINE" 	Value="$(LS) -r -s $(OUT) $(OBJ_FILES)" />
            <Macro Name="EXE_LINK_COMMAND_LINE" 	Value="$(LD) $(OBJ_FILES) $(LDLIBS)  $(LDFLAGS) $(LINK_PATHS) -o $(OUT)" />
            <Macro Name="DSYM_COMMAND_LINE" 	    Value="$(OBJCOPY) --only-keep-debug $(INPUT) $(OUT)" />
            <Macro Name="STRIP_COMMAND_LINE" 	    Value="$(STRIP) --strip-debug --strip-unneeded $(INPUT)" />

            
            <!--TYPES_OF_FILES_TO_BE_COMPILED: this macro specify what files to compile. Add here the extension and ';' as a separator-->
            <Macro Name="TYPES_OF_FILES_TO_BE_COMPILED"	Value="cpp;cc;c" />
            
            
            <!--DEFINES: this is mandatory and it is very important. You can see here CommonValue, DebugValue and ReleaseValue. 
                        The DEFINES for <CommonGccConfig> will be calculated like this:
                            for release:  	DEFINES = CommonValue + ReleaseValue 
                            for debug:		DEFINES = CommonValue + DebugValue 
                        Separators: ';' space or new line -->
            <Macro Name="DEFINES" 	CommonValue="OS_ANDROID"
                                    DebugValue="_DEBUG"
                                    ReleaseValue=""	/>
                <!-- Note: _GLIBCXX_USE_C99_MATH=1 is needed to have std:isnan, which is used by the smath part of Jet engine -->
                                    
                                    
            <!--CFLAGS: Represents the Gcc standard compiler flags that you want to use. 
                        This is mandatory and it is very important. You can see here CommonValue, DebugValue and ReleaseValue. 
                        The CFLAGS for <CommonGccConfig> will be calculated like this:
                            for release:  	CFLAGS = CommonValue + ReleaseValue 
                            for debug:		CFLAGS = CommonValue + DebugValue 
                        Separators: ';' space or new line -->
            <!-- -ffunction-sections -->
            <Macro Name="CFLAGS" 	CommonValue="	
													-fsigned-char
													"
                                    DebugValue="-g"
                                    ReleaseValue="-w -O3"	/>
                                    
            <!--INCLUDE_PATHS: 	Specify the paths where the headers are searched 
                                Do not use paths with space in it.
                                Separators: ';' space or new line -->							
            <Macro Name="INCLUDE_PATHS" CommonValue="$(ANDROID_NDK_PATH)\platforms\$(ANDROID_PLATFORM)\arch-x86\usr\include"
                                        DebugValue=""
                                        ReleaseValue=""	/>
            
            
            <!--LDLIBS: Here you can specify the static libraryes that you need use at linking step. You have to use the Gcc naming convention.
                        For example: -lstdc++  means that you want to use libstdc++.a library file
                        Separators: ';' space or new line -->							
            <Macro Name="LDLIBS" Value="" />
            
            
            <!--LDFLAGS: Gcc standard linker flags used to create *.so files
                         The LDFLAGS for <CommonGccConfig> will be calculated like this:
                            for release:  	LDFLAGS = CommonValue + ReleaseValue 
                            for debug:		LDFLAGS = CommonValue + DebugValue 
                         Separators: ';' space or new line -->	
            <Macro Name="LDFLAGS" 	CommonValue="" 
                                    DebugValue=""
                                    ReleaseValue=""	/>
                            
                            
            <!--LINK_PATHS: 	Specify the paths where the to search the libraries specified in LDLIBS
                                Do not use paths with space in it.
                                Separators: ';' space or new line -->			

            <Macro Name="LINK_PATHS" Value="" />
        </GccConfig>
           
		<GccConfig Name="armeabi">
    
            <Macro Name="MAIN_PROJECT" 			Value="" />
            <Macro Name="GENERATE_DSYM"			Value="False" />
            <Macro Name="STRIP_DEBUG_SYMBOLS_FOR_RELEASE"	Value="True" />
            <Macro Name="STRIP_DEBUG_SYMBOLS_FOR_DEBUG"	    Value="False" />
            
            
            <!--ANDROID_NDK_PATH: user defined macro. The value for this macro it is taken from Environment Variables. If ANDROID_NDK_HOME it is not declared the value for 
                ANDROID_NDK_PATH will be blank/empty/nothing/nada :) -->
            <Macro Name="ANDROID_NDK_PATH" 		Value="$(ANDROID_NDK_HOME)" />
            <!--ANDROID_PLATFORM: user defined macro. -->
            <Macro Name="ANDROID_PLATFORM" 		Value="android-$(NATIVE_API_LEVEL)" />
            <!--TOOLCHAIN_FOLDERNAME: user defined macro. -->
            <Macro Name="TOOLCHAIN_VERSION"		Value="4.4.3" />
            <!-- <Macro Name="TOOLCHAIN_VERSION"		Value="4.7" /> -->
            <Macro Name="TOOLCHAIN_FOLDERNAME"	Value="arm-linux-androideabi-$(TOOLCHAIN_VERSION)" />
            
            
            <!--TOOLCHAIN: required macro. This it is used to specify the path to the compile/link tools-->
            <Macro Name="TOOLCHAIN" 			Value="$(ANDROID_NDK_PATH)\toolchains\$(TOOLCHAIN_FOLDERNAME)\prebuilt\windows\bin\" />
            
            
            <!--CPP: 	the compiler for cpp files
                CC: 	the compiler for c files
                LD: 	the linker for dynamic libraryes, aka *.so files
                LS: 	the linker for static libraryes, aka *.a files	
                This macros are required!
                -->
			<Macro Name="TOOLCHAIN_PREFIX"		Value="arm-linux-androideabi" />
            <Macro Name="CPP" 			Value="$(TOOLCHAIN)\$(TOOLCHAIN_PREFIX)-g++.exe" />
            <Macro Name="CC" 			Value="$(TOOLCHAIN)\$(TOOLCHAIN_PREFIX)-gcc.exe" />
            <Macro Name="LD" 			Value="$(TOOLCHAIN)\$(TOOLCHAIN_PREFIX)-g++.exe" />
            <Macro Name="LS" 			Value="$(TOOLCHAIN)\$(TOOLCHAIN_PREFIX)-ar.exe" />
            <Macro Name="OBJCOPY"		Value="$(TOOLCHAIN)\$(TOOLCHAIN_PREFIX)-objcopy.exe" />
            <Macro Name="STRIP"		    Value="$(TOOLCHAIN)\$(TOOLCHAIN_PREFIX)-strip.exe" />
            
            
            
            <!--COMPILE_CPP_COMMAND_LINE: this is the command line to compile the cpp files -->
            <!--COMPILE_CC_COMMAND_LINE: this is the command line to compile the c files -->
            <!--DYNAMIC_LINK_COMMAND_LINE: this is the command line that creates *.so files (dynamic libraryes)-->
            <!--DYNAMIC_LINK_COMMAND_LINE: this is the command line that creates *.a files	(static libraryes)-->
            <!--This Macro needs a little bit more explanation. You can see that this Macros use $(DEFINES), $(CFLAGS).
                For instance if we have to compile a file from project Android, the final value of $(DEFINES) will be 
                $(DEFINES) from <Project Name="Android">     +       $(DEFINES) from <CommonGccConfig> .
                The same algorithm it is used also for $(INCLUDE_PATHS), $(CFLAGS) etc...-->
            <Macro Name="COMPILE_CPP_COMMAND_LINE" 	Value="$(CPP) $(DEFINES) $(CFLAGS) $(INCLUDE_PATHS) -c $(SRC_FILE) -o $(OBJ_FILE)" />
            <Macro Name="COMPILE_CC_COMMAND_LINE" 	Value="$(CC) $(DEFINES) $(CFLAGS) $(INCLUDE_PATHS) -c $(SRC_FILE) -o $(OBJ_FILE)" />
            <Macro Name="DYNAMIC_LINK_COMMAND_LINE" Value="$(LD) -Wl,-soname,$(OUT) -shared $(OBJ_FILES) $(LDLIBS)  $(LDFLAGS) $(LINK_PATHS) -o $(OUT)" />
            <Macro Name="STATIC_LINK_COMMAND_LINE" 	Value="$(LS) -r -s $(OUT) $(OBJ_FILES)" />
            <Macro Name="EXE_LINK_COMMAND_LINE" 	Value="$(LD) $(OBJ_FILES) $(LDLIBS)  $(LDFLAGS) $(LINK_PATHS) -o $(OUT)" />
            <Macro Name="DSYM_COMMAND_LINE" 	    Value="$(OBJCOPY) --only-keep-debug $(INPUT) $(OUT)" />
            <Macro Name="STRIP_COMMAND_LINE" 	    Value="$(STRIP) --strip-debug --strip-unneeded $(INPUT)" />

            
            <!--TYPES_OF_FILES_TO_BE_COMPILED: this macro specify what files to compile. Add here the extension and ';' as a separator-->
            <Macro Name="TYPES_OF_FILES_TO_BE_COMPILED"	Value="cpp;cc;c" />
            
            
            <!--DEFINES: this is mandatory and it is very important. You can see here CommonValue, DebugValue and ReleaseValue. 
                        The DEFINES for <CommonGccConfig> will be calculated like this:
                            for release:  	DEFINES = CommonValue + ReleaseValue 
                            for debug:		DEFINES = CommonValue + DebugValue 
                        Separators: ';' space or new line -->
            <Macro Name="DEFINES" 	CommonValue="OS_ANDROID"
                                    DebugValue="_DEBUG"
                                    ReleaseValue=""	/>
                <!-- Note: _GLIBCXX_USE_C99_MATH=1 is needed to have std:isnan, which is used by the smath part of Jet engine -->
                                    
                                    
            <!--CFLAGS: Represents the Gcc standard compiler flags that you want to use. 
                        This is mandatory and it is very important. You can see here CommonValue, DebugValue and ReleaseValue. 
                        The CFLAGS for <CommonGccConfig> will be calculated like this:
                            for release:  	CFLAGS = CommonValue + ReleaseValue 
                            for debug:		CFLAGS = CommonValue + DebugValue 
                        Separators: ';' space or new line -->
            <!-- -ffunction-sections -->
            <Macro Name="CFLAGS" 	CommonValue="	-mandroid 
              -ffunction-sections 
              -funwind-tables 
              -fstack-protector 
              -fpic 
              -Wno-psabi 
              -march=armv7-a 
              -mfpu=vfpv3-d16 
              -mfloat-abi=softfp 
              -Wno-write-strings 
              -fsigned-char 
              -fno-exceptions 
              -fno-rtti 
              -fomit-frame-pointer 
              -fno-strict-aliasing 
              -finline-limit=300 
              -ffast-math 
              -pipe  
													"
                                    DebugValue="-g"
                                    ReleaseValue="-w -fomit-frame-pointer -Os -O2"	/>
                                    
            <!--INCLUDE_PATHS: 	Specify the paths where the headers are searched 
                                Do not use paths with space in it.
                                Separators: ';' space or new line -->							
            <Macro Name="INCLUDE_PATHS" CommonValue="
                                                     $(ANDROID_NDK_PATH)\platforms\$(ANDROID_PLATFORM)\arch-arm\usr\include
                                                     " 
                                        DebugValue=""
                                        ReleaseValue=""	/>
            
            
            <!--LDLIBS: Here you can specify the static libraryes that you need use at linking step. You have to use the Gcc naming convention.
                        For example: -lstdc++  means that you want to use libstdc++.a library file
                        Separators: ';' space or new line -->							
            <Macro Name="LDLIBS" Value="" />
            
            
            <!--LDFLAGS: Gcc standard linker flags used to create *.so files
                         The LDFLAGS for <CommonGccConfig> will be calculated like this:
                            for release:  	LDFLAGS = CommonValue + ReleaseValue 
                            for debug:		LDFLAGS = CommonValue + DebugValue 
                         Separators: ';' space or new line -->	
            <Macro Name="LDFLAGS" 	CommonValue="" 
                                    DebugValue=""
                                    ReleaseValue=""	/>
                            
                            
            <!--LINK_PATHS: 	Specify the paths where the to search the libraries specified in LDLIBS
                                Do not use paths with space in it.
                                Separators: ';' space or new line -->			

            <Macro Name="LINK_PATHS" Value="" />
        </GccConfig>
	</CommonGccConfig>
    
    <Project Name="kataprofiler">

    </Project>
	
</Makefile>
